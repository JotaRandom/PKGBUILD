diff -ruN Paragon_NTFS_HFS_Linux_8.5.005_Express/ifslinux/ufsdvfs.c ufsd-8.5.005/ifslinux/ufsdvfs.c
--- Paragon_NTFS_HFS_Linux_8.5.005_Express/ifslinux//ufsdvfs.c	2013-07-12 20:59:11.394928731 +1000
+++ Paragon_NTFS_HFS_Linux_8.5.005_Express/ifslinux//ufsdvfs.c	2013-07-12 21:10:00.274904801 +1000
@@ -129,6 +129,10 @@
   #include <linux/fs_struct.h>
 #endif
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(3, 10, 0)
+	#define HAVE_PROC_CREATE
+	#include <linux/aio.h>
+#endif 
 //
 // Default trace level for many functions in this module
 //
@@ -8453,6 +8457,43 @@
 static struct proc_dir_entry* proc_info_root = NULL;
 static const char proc_info_root_name[] = "fs/ufsd";
 
+
+#ifdef HAVE_PROC_CREATE
+///////////////////////////////////////////////////////////
+// volinfo read proc callback
+//
+//
+///////////////////////////////////////////////////////////
+static ssize_t ufsd_proc_volinfo_read( struct file *filp, char __user *buff,
+    size_t count, loff_t *off ) 
+{
+  int len;
+  int ret;
+  char *kbuffer;
+  usuper* sbi = (usuper*)PDE_DATA(file_inode(filp));
+
+  kbuffer = kmalloc(PAGE_SIZE, GFP_KERNEL);
+  //
+  // Call UFSD library
+  //
+  LockUfsd( sbi );
+
+  len = UFSDAPI_TraceVolumeInfo( sbi->Ufsd, kbuffer, count, &snprintf );
+  
+  UnlockUfsd( sbi );
+
+  ret = simple_read_from_buffer(buff, count, off, kbuffer, len + 1);
+
+  kfree(kbuffer);
+
+  return ret;
+}
+static struct file_operations proc_volinfo_operations = {
+  .owner    = THIS_MODULE,
+  .read     = ufsd_proc_volinfo_read,
+  .write    = NULL
+}; 
+#else
 ///////////////////////////////////////////////////////////
 // ufsd_proc_volinfo
 //
@@ -8483,8 +8524,120 @@
   *eof = 1;
   return len;
 }
+#endif
+
+
+#ifdef HAVE_PROC_CREATE
+///////////////////////////////////////////////////////////
+// ufsd_read_label
+//
+//
+///////////////////////////////////////////////////////////
+static int ufsd_proc_label_show(struct seq_file *m, void *v) {
+  usuper* sbi = (usuper*) m->private;
+  int i;
+  char *kbuffer;
+
+  //
+  // Call UFSD library
+  //
+  kbuffer = kmalloc(PAGE_SIZE, GFP_KERNEL);
+  if(NULL == kbuffer)
+    return -ENOMEM;
+
+  LockUfsd( sbi );
+
+  UFSDAPI_QueryVolumeInfo( sbi->Ufsd, NULL, kbuffer, PAGE_SIZE );
+
+  UnlockUfsd( sbi );
+
+  DebugTrace(0, Dbg, ("read_label: %s\n", kbuffer ) );
+
+  //
+  // Add last '\n'
+  //
+  for ( i = 0; i < PAGE_SIZE - 1; i++ ) {
+    if ( 0 == kbuffer[i] ) {
+      kbuffer[i++] = '\n';
+      memset( kbuffer + i, 0, PAGE_SIZE - i );
+      break;
+    }
+  }
+  seq_printf(m, kbuffer);
+  kfree(kbuffer);
+
+  return 0;
+}
+
+static int ufsd_proc_label_open(struct inode *inode, struct file *file)
+{
+  return single_open(file, ufsd_proc_label_show, PDE_DATA(inode));
+}
+
+static ssize_t
+ufsd_proc_label_write(struct file *filp, const char __user *buffer, size_t count, loff_t * off)
+{
+  int ret;
+  usuper* sbi = (usuper*)PDE_DATA(file_inode(filp));
+  char* Label;
+
+  //
+  // Maximum label length on NTFS is 128 UTF16 symbols (256 bytes). See $AttrDef
+  //
+  if ( count > 128 )
+    count = 128;
+
+  //
+  // Get label into kernel memory
+  //
+  Label = kmalloc( count + 1, GFP_NOFS );
+  if ( NULL == Label )
+    return -ENOMEM;
+
+  if ( 0 != copy_from_user( Label, buffer, count ) ) {
+    ret = -EINVAL;
+  } else {
+
+    if ( count > 0 && '\n' == Label[count-1] ) {
+      // Remove last '\n'
+      Label[count-1] = 0;
+    } else {
+      // Set last zero
+      Label[count] = 0;
+    }
+
+    DebugTrace(0, Dbg, ("write_label: %s\n", Label ) );
+
+    //
+    // Call UFSD library
+    //
+    LockUfsd( sbi );
+
+    ret = UFSDAPI_SetVolumeInfo( sbi->Ufsd, NULL, Label, 0 );
+
+    UnlockUfsd( sbi );
+
+    if ( 0 == ret ){
+      ret = count; // Ok
+    } else {
+      DebugTrace(0, DEBUG_TRACE_ERROR, ("write_label failed: %x\n", ret ) );
+      ret = -EINVAL;
+    }
+  }
 
+  kfree( Label );
+  return ret;
+}
 
+static struct file_operations proc_label_operations = {
+  .owner    = THIS_MODULE,
+  .open     = ufsd_proc_label_open,
+  .read     = seq_read,
+  .llseek   = seq_lseek,
+  .release  = single_release,
+  .write    = ufsd_proc_label_write,
+}; 
+#else
 ///////////////////////////////////////////////////////////
 // ufsd_read_label
 //
@@ -8594,8 +8747,100 @@
   kfree( Label );
   return ret;
 }
+#endif
+
+
+#ifdef HAVE_PROC_CREATE
+///////////////////////////////////////////////////////////
+// ufsd_read_tune
+//
+//
+///////////////////////////////////////////////////////////
+static int ufsd_proc_tune_show(struct seq_file *m, void *v)
+{
+  usuper* sbi = (usuper*)m->private;
+
+  UfsdVolumeTune vt;
+
+  //
+  // Call UFSD library
+  //
+  LockUfsd( sbi );
+
+  UFSDAPI_QueryVolumeTune( sbi->Ufsd, &vt );
+
+  UnlockUfsd( sbi );
+
+  seq_printf( m, "Ra=%u DirAge=%u JnlRam=%u\n", sbi->ReadAheadPages, vt.DirAge, vt.JnlRam );
+
+  return 0;
+}
+
+static int ufsd_proc_tune_open(struct inode *inode, struct file *file)
+{
+  return single_open(file, ufsd_proc_tune_show, PDE_DATA(inode));
+}
+
+
+static ssize_t
+ufsd_proc_tune_write(struct file *filp, const char __user *buffer, size_t count, loff_t * off)
+{
+  int ret;
+  usuper* sbi = (usuper*)PDE_DATA(file_inode(filp));
+  //
+  // Copy buffer into kernel memory
+  //
+  char* kbuffer = kmalloc( count + 1, GFP_NOFS );
+  if ( NULL == kbuffer )
+    return -ENOMEM;
+
+  if ( 0 != copy_from_user( kbuffer, buffer, count ) ) {
+    ret = -EINVAL;
+  } else {
+    unsigned int NewReadAhead;
+    UfsdVolumeTune vt;
+    int Parsed = sscanf( kbuffer, "Ra=%u DirAge=%u JnlRam=%u", &NewReadAhead, &vt.DirAge, &vt.JnlRam );
+    if ( Parsed < 1 ) {
+      DebugTrace(0, DEBUG_TRACE_ERROR, ("failed to parse tune buffer \"%s\"\n", kbuffer) );
+      ret = -EINVAL;
+    } else {
+      sbi->ReadAheadPages = NewReadAhead;
+
+      if ( Parsed >= 3 ) {
+        //
+        // Call UFSD library
+        //
+        LockUfsd( sbi );
+
+        ret = UFSDAPI_SetVolumeTune( sbi->Ufsd, &vt );
+
+        UnlockUfsd( sbi );
+      } else {
+        ret = 0;
+      }
+    }
 
+    if ( 0 == ret ){
+      ret = count; // Ok
+    } else {
+      DebugTrace(0, DEBUG_TRACE_ERROR, ("write_tune failed: %x\n", ret ) );
+      ret = -EINVAL;
+    }
+  }
 
+  kfree( kbuffer );
+  return ret;
+}
+
+static struct file_operations proc_tune_operations = {
+  .owner    = THIS_MODULE,
+  .open     = ufsd_proc_tune_open,
+  .read     = seq_read,
+  .llseek   = seq_lseek,
+  .release  = single_release,
+  .write    = ufsd_proc_tune_write,
+}; 
+#else
 ///////////////////////////////////////////////////////////
 // ufsd_read_tune
 //
@@ -8689,6 +8934,7 @@
   kfree( kbuffer );
   return ret;
 }
+#endif
 
 
 ///////////////////////////////////////////////////////////
@@ -8696,6 +8942,38 @@
 //
 //
 ///////////////////////////////////////////////////////////
+#ifdef HAVE_PROC_CREATE
+static ssize_t ufsd_proc_version_read( struct file *filp, char __user *buff,
+    size_t count, loff_t *off ) 
+{
+  int len;
+  int ret;
+  char *kbuffer;
+
+  kbuffer = kmalloc(PAGE_SIZE, GFP_KERNEL);
+  if(NULL == kbuffer)
+    return -ENOMEM;
+
+  //
+  // Call UFSD library
+  //
+
+  len = sprintf( kbuffer, "%s%s\ndriver %s loaded at %p, sizeof(inode)=%u\n",
+                 UFSDAPI_LibraryVersion(), s_FileVer, s_DriverVer, MODULE_BASE_ADDRESS, (unsigned)sizeof(struct inode) );
+
+  ret = simple_read_from_buffer(buff, count, off, kbuffer, len + 1);
+
+  kfree(kbuffer);
+  
+  return ret;
+}
+
+static struct file_operations ufsd_proc_version_operation = {
+  .owner    = THIS_MODULE,
+  .read     = ufsd_proc_version_read,
+  .write    = NULL
+}; 
+#else
 static int
 ufsd_proc_version(
     IN  char *page,
@@ -8735,6 +9013,7 @@
 
   return len;
 }
+#endif
 
 
 ///////////////////////////////////////////////////////////
@@ -8757,6 +9036,27 @@
     if ( NULL == sbi->procdir ) {
       printk( KERN_NOTICE QUOTED_UFSD_DEVICE": cannot create /proc/%s/%s", proc_info_root_name, dev );
     } else {
+#ifdef HAVE_PROC_CREATE
+      struct proc_dir_entry *de;
+      de = proc_create_data("volinfo",
+			  0444,
+			  sbi->procdir,
+			  &proc_volinfo_operations,
+			  (void*)sbi); 
+
+	  de = proc_create_data("label",
+			  0664,
+			  sbi->procdir,
+			  &proc_label_operations,
+			  (void*)sbi);
+
+	  de = proc_create_data("tune",
+			  0664,
+			  sbi->procdir,
+			  &proc_tune_operations,
+			  (void*)sbi);
+		
+#else /* kernel < 3.10.0 */
       struct proc_dir_entry* de;
 #if defined HAVE_STRUCT_PROC_DIR_ENTRY_OWNER && HAVE_STRUCT_PROC_DIR_ENTRY_OWNER
       sbi->procdir->owner = THIS_MODULE;
@@ -8786,6 +9086,7 @@
         de->owner      = THIS_MODULE;
 #endif
       }
+#endif /* HAVE_PROC_CREATE */
     }
 
   } else {
@@ -10579,7 +10880,11 @@
 #if defined HAVE_STRUCT_PROC_DIR_ENTRY_OWNER && HAVE_STRUCT_PROC_DIR_ENTRY_OWNER
       proc_info_root->owner = THIS_MODULE;
 #endif
+#ifdef HAVE_PROC_CREATE
+      proc_create("version", 0444, proc_info_root, &ufsd_proc_version_operation);
+#else
       create_proc_read_entry("version", 0, proc_info_root, &ufsd_proc_version, NULL );
+#endif
     } else {
       printk( KERN_NOTICE QUOTED_UFSD_DEVICE": cannot create /proc/%s", proc_info_root_name );
     }
