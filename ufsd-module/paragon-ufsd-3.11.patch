diff -ruN old/ifslinux/ufsdvfs.c ufsd-8.5.005/ifslinux/ufsdvfs.c
--- Paragon_NTFS_HFS_Linux_8.5.005_Express/ifslinux/ufsdvfs.c	2013-10-19 16:00:52.157435556 +1100
+++ Paragon_NTFS_HFS_Linux_8.5.005_Express/ifslinux/ufsdvfs.c	2013-10-19 16:53:41.617314318 +1100
@@ -133,6 +133,12 @@
 	#define HAVE_PROC_CREATE
 	#include <linux/aio.h>
 #endif 
+
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(3, 11, 0)
+	#define physmem totalram_pages 
+#else
+	#define physmem num_physpages 
+#endif
 //
 // Default trace level for many functions in this module
 //
@@ -660,7 +666,7 @@
     head = (MEMBLOCK_HEAD*)kmalloc( AllocatedSize + TheOverhead, GFP_NOFS );
   } else {
     AllocatedSize = PAGE_ALIGN(Size + TheOverhead) - TheOverhead;
-    head = (AllocatedSize + TheOverhead) >> PAGE_SHIFT >= num_physpages
+    head = (AllocatedSize + TheOverhead) >> PAGE_SHIFT >= physmem;
         ? NULL
         : (MEMBLOCK_HEAD*)vmalloc( AllocatedSize + TheOverhead );
     ASSERT( (size_t)head >= VMALLOC_START && (size_t)head < VMALLOC_END );
@@ -808,7 +814,7 @@
   if ( Size <= PAGE_SIZE ) {
     ptr = kmalloc(Size, GFP_NOFS);
   } else {
-    ptr = Size >> PAGE_SHIFT >= num_physpages? NULL : vmalloc( Size );
+    ptr = Size >> PAGE_SHIFT >= physmem? NULL : vmalloc( Size );
     ASSERT( (size_t)ptr >= VMALLOC_START && (size_t)ptr < VMALLOC_END );
   }
 
@@ -1852,13 +1858,12 @@
 //    'filldir()' helper
 ///////////////////////////////////////////////////////////
 static int
-ufsd_readdir(
+ufsd_iterate(
     IN struct file* file,
-    IN void*        dirent,
-    IN filldir_t    filldir
+	IN struct dir_context *ctx
     )
 {
-  UINT64 pos = file->f_pos;
+  UINT64 pos = ctx->pos;
   struct inode* i = file->f_dentry->d_inode;
   unode* u     = UFSD_U( i );
   usuper* sbi  = UFSD_SB( i->i_sb );
@@ -1895,7 +1900,7 @@
       // Unfortunately nfsd callback function opens file which in turn calls 'LockUfsd'
       // Linux's mutex does not allow recursive locks
       //
-      fd = filldir( dirent, Name, NameLen, pos, (ino_t)ino, is_dir? DT_DIR : DT_REG );
+	  fd = !dir_emit(ctx, Name, NameLen, (ino_t)ino, is_dir? DT_DIR : DT_REG);
 
       if ( nfsd )
         LockUfsd( sbi );
@@ -1912,7 +1917,7 @@
   //
   // Save position and return
   //
-  file->f_pos = pos;
+  ctx->pos = pos;
   file->f_version = i->i_version;
 #if defined HAVE_DECL_UPDATE_ATIME && HAVE_DECL_UPDATE_ATIME
   update_atime( i );
@@ -2444,7 +2449,7 @@
 
 STATIC_CONST struct file_operations ufsd_dir_operations = {
   .read     = generic_read_dir,
-  .readdir  = ufsd_readdir,
+  .iterate  = ufsd_iterate,
   .fsync    = generic_file_fsync,
   .open     = ufsd_file_open,
   .release  = ufsd_file_release,
@@ -2508,9 +2513,7 @@
 static int
 ufsd_compare(
     IN const struct dentry* parent,
-    IN const struct inode * iparent,
     IN const struct dentry* de,
-    IN const struct inode * i,
     IN unsigned int         len,
     IN const char*          str,
     IN const struct qstr*   name
@@ -2535,7 +2538,6 @@
 static int
 ufsd_name_hash(
     IN const struct dentry* de,
-    IN const struct inode*  i,
     IN struct qstr*         name
     )
 {
@@ -6923,7 +6925,7 @@
         break;
       BUG_ON(!PageLocked( page ) );
       BUG_ON(PageWriteback( page ) );
-      block_invalidatepage( page, 0 );
+      block_invalidatepage( page, 0, PAGE_CACHE_SIZE );
       ClearPageUptodate( page );
       unlock_page( page );
     }
@@ -7810,7 +7812,7 @@
   if ( 0 == offset )
     ClearPageChecked( page );
 
-  block_invalidatepage( page, offset );
+  block_invalidatepage( page, offset, PAGE_CACHE_SIZE );
 }
 
 #endif // #ifdef UFSD_DELAY_ALLOC
